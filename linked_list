#include<iostream>
using namespace std;
class node{
    public:
    int data ;
    node* next ;

    node(int data){
        this -> data = data ;
        next = NULL ;
    }
};
node *takeInput(){
    node *head = NULL ;
    node *tail =NULL ;
    int data ;
    cin >> data ;
    while(data != -1){
         node *newNode = new node(data) ;
        if(head == NULL){
            head = newNode ;
            tail = newNode ;
        }
        else{
            tail -> next = newNode ;
            tail = newNode  ;// or we can write tail = tail -> next
             }
        cin >> data ;
    }
    return head ;
}
void print(node *head){
    node * temp = head ;
    while(temp != NULL){
        cout << temp -> data <<" ";
        temp = temp -> next ;
    }
    cout << "\n" ;

}

int length(node *head)
{
    int len=0;
    while(head!=NULL)
    {
        head=head->next;
        len++;
    }
    return len;
 }

node *insertNode(node *head, int index,int data){
    int i = 0 ;
    node * temp = head ;
    node *newNode = new node(data) ;
    if(index == 0){
        newNode -> next = head ;
        head = newNode ;
        return head ;
    }
    while(temp != NULL && i < index - 1){
        i++ ;
        temp = temp -> next ;
    } 
    if(temp != NULL){
    newNode -> next = temp -> next ;
    temp -> next = newNode ;
    }
    return head ;
}
node *deleteNode(node *head,int index){
    int i = 0 ;
    node *temp = head ;
    if(index == 0){
        node *a = temp ;
        head = a -> next ;
        delete a ;
        return head ;
    }
    while(temp -> next != NULL && i < index-1){
        temp = temp -> next ;
        i++ ;
    }
    node *a = temp -> next ;
    node *b = a -> next ;
    temp -> next = b ;
    delete a ;
    if(index > i)
    return head ;
}

int main(){
    node *head = takeInput() ;
    print(head) ;
   int ll =  length(head);
   cout << ll << "\n" ; // to find the length of the linked list
    head = insertNode(head,2,100) ;
    print(head) ;
    head = deleteNode(head,4) ;
    print(head) ;
}
