

#include <iostream>
using namespace std;
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};

node* takeinput(){
    int data;
    cin>>data;
    node* head=NULL,*tail=NULL;
    while(data!=-1){
        node *newnode=new node(data);
        if(head==NULL)                  {
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
        cin>>data;
    }
    return head;
}
void print(node *head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}


node* mergeTwoLLs(node *head1, node *head2)
{
    node*fh=NULL;
     node*ft=NULL;
     node*h1=head1;
     node*h2=head2;
    if(h1->data<=h2->data)
    {
        fh=head1;
        ft=head1;
        h1=h1->next;
    }
    else{
        fh=head2;
        ft=head2;
        h2=h2->next;
    }
    while(h1!=NULL && h2!=NULL)
    {
        if(h1->data<=h2->data)
        {
            ft->next=h1;
            ft=h1;
            h1=h1->next;
        }
        else if(h1->data>h2->data)
        {
            ft->next=h2;
            ft=h2;
            h2=h2->next;
        }
    }
    while(h2!=NULL )
    {
        ft->next=h2;
        ft=h2;
        h2=h2->next;
    }
    while(h1!=NULL )

    {
        ft->next=h1;
        ft=h1;
        h1=h1->next;
    }
    return fh;
    
}


node*mid(node*head)
{
    node*s=head;
    node*f=s->next;
    while(f!=NULL&&f->next!=NULL)
    {
        s=s->next;
        f=f->next->next;
    }
    return s;
}


node* mergeSort(node *head) 
{
    node*bich=mid(head);
    if(head==NULL ||head->next==NULL)
    {
        return head;
    }
    node*head2=bich->next;
    bich->next=NULL;
    head=mergeSort(head);
    head2=mergeSort(head2);
    return mergeTwoLLs(head,head2);
    
}


int main()
{
    node* head=takeinput();
    head= mergeSort(head);
    print(head);
    return 0;
}



